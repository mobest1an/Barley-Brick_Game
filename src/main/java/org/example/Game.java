package org.example;

import javax.swing.*;
import javax.swing.border.LineBorder;
import java.awt.*;
import java.awt.event.*;
import java.util.Random;

public class Game {
    private JPanel mainPanel;
    private JPanel gamePanel;
    private JPanel menuPanel;
    private JButton resetButton;
    private JFrame gameFrame = new JFrame("Пятнашки");
    private int size = 4;
    private int numberCount = size * size - 1;
    private Random random = new Random();
    private int[] numbers = new int[16];
    private int emptyPosition;
    private boolean gameOver;

    public void createFrame() {
        gameFrame.setResizable(false);
        gameFrame.add(mainPanel);
        gameFrame.setBounds(500, 200, 400, 500);
        gameFrame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        gameFrame.pack();
        gameFrame.setVisible(true);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        mainPanel.setLayout(new GridBagLayout());
        mainPanel.setPreferredSize(new Dimension(400, 410));
        gamePanel.setPreferredSize(new Dimension(400, 400));
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.BOTH;
        mainPanel.add(gamePanel, gbc);
        menuPanel = new JPanel();
        menuPanel.setLayout(new GridBagLayout());
        menuPanel.setPreferredSize(new Dimension(400, 10));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.BOTH;
        mainPanel.add(menuPanel, gbc);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

    private void createUIComponents() {
        mainPanel = new JPanel();
        resetButton = new JButton();
        resetButton.addActionListener(new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                newGame();
            }
        });
        gamePanel = new JPanel() {
            Graphics2D graphics2D;

            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                graphics2D = (Graphics2D) g;

                int x = 5;
                int y = 5;
                int iterator = 0;
                Font font = new Font("HELVETICA", Font.PLAIN, 40);
                graphics2D.setFont(font);
                for (int i = 0; i < 4; i++) {
                    for (int j = 0; j < 4; j++) {
                        if (numbers[iterator] != 0) {
                            graphics2D.setColor(Color.ORANGE);
                            graphics2D.fillRect(x, y, 90, 90);
                            graphics2D.setColor(Color.WHITE);
                            FontMetrics metrics = graphics2D.getFontMetrics();
                            int x1 = x + (90 - metrics.stringWidth(String.valueOf(numbers[iterator]))) / 2;
                            int y1 = y + ((90 - metrics.getHeight()) / 2) + metrics.getAscent();
                            graphics2D.drawString(String.valueOf(numbers[iterator]), x1, y1);
                        }
                        x += 100;
                        iterator++;
                    }
                    x = 5;
                    y += 100;
                }
            }
        };

        gamePanel.setBorder(new LineBorder(Color.BLACK));

        gamePanel.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                super.mousePressed(e);
                if ((e.getX() >= 5 && e.getX() <= 95 || e.getX() >= 105 && e.getX() <= 195 || e.getX() >= 205 && e.getX() <= 295 || e.getX() >= 305 && e.getX() <= 395) &&
                        (e.getY() >= 5 && e.getY() <= 95 || e.getY() >= 105 && e.getY() <= 195 || e.getY() >= 205 && e.getY() <= 295 || e.getY() >= 305 && e.getY() <= 395)) {
                    int x = e.getX() / 100;
                    int y = e.getY() / 100;

                    int emptyX = emptyPosition % 4;
                    int emptyY = emptyPosition / 4;

                    int clickPos = x + y * 4;

                    int direction = 0;

                    if (Math.abs(x - emptyX) == 1 && y == emptyY) {
                        direction = (x - emptyX) > 0 ? 1 : -1;
                    } else if (Math.abs(y - emptyY) == 1 && x == emptyX) {
                        direction = (y - emptyY) > 0 ? 4 : -4;
                    }
                    if (direction != 0) {
                        do {
                            int newEmptyPosition = emptyPosition + direction;
                            numbers[emptyPosition] = numbers[newEmptyPosition];
                            emptyPosition = newEmptyPosition;
                        } while (emptyPosition != clickPos);
                        numbers[emptyPosition] = 0;
                    }
                    gameOver = isSolved();
                }
                mainPanel.repaint();
                if (gameOver) {
                    JOptionPane.showMessageDialog(null, "YOU WIN!", "Congratulations", JOptionPane.INFORMATION_MESSAGE);
                    newGame();
                }
            }
        });

        gameFrame.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                super.keyPressed(e);

                int emptyX = emptyPosition % 4;
                int emptyY = emptyPosition / 4;

                switch (e.getKeyCode()) {
                    case KeyEvent.VK_UP:
                        if (emptyY != 3) {
                            int newEmptyPosition = emptyPosition + 4;
                            numbers[emptyPosition] = numbers[newEmptyPosition];
                            emptyPosition = newEmptyPosition;
                            numbers[emptyPosition] = 0;
                        }
                        break;
                    case KeyEvent.VK_DOWN:
                        if (emptyY != 0) {
                            int newEmptyPosition = emptyPosition - 4;
                            numbers[emptyPosition] = numbers[newEmptyPosition];
                            emptyPosition = newEmptyPosition;
                            numbers[emptyPosition] = 0;
                        }
                        break;
                    case KeyEvent.VK_RIGHT:
                        if (emptyX != 0) {
                            int newEmptyPosition = emptyPosition - 1;
                            numbers[emptyPosition] = numbers[newEmptyPosition];
                            emptyPosition = newEmptyPosition;
                            numbers[emptyPosition] = 0;
                        }
                        break;
                    case KeyEvent.VK_LEFT:
                        if (emptyX != 3) {
                            int newEmptyPosition = emptyPosition + 1;
                            numbers[emptyPosition] = numbers[newEmptyPosition];
                            emptyPosition = newEmptyPosition;
                            numbers[emptyPosition] = 0;
                        }
                        break;
                }
                gameOver = isSolved();
                mainPanel.repaint();
                if (gameOver) {
                    JOptionPane.showMessageDialog(null, "YOU WIN!", "Congratulations", JOptionPane.INFORMATION_MESSAGE);
                    newGame();
                }
            }
        });

        JMenuBar menu = new JMenuBar();
        JMenu fileMenu = new JMenu("File");
        fileMenu.setMnemonic(KeyEvent.VK_F);

        JMenu helpMenu = new JMenu("Help");
        helpMenu.setMnemonic(KeyEvent.VK_H);

        JMenuItem about = new JMenuItem("About", KeyEvent.VK_A);
        about.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_A, InputEvent.CTRL_DOWN_MASK));
        about.setActionCommand("About".toLowerCase());
        about.addActionListener(new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String command = e.getActionCommand();
                if ("about".equals(command)) {
                    JOptionPane.showMessageDialog(null, "Created by Martsenko Anastasia P3268 2021", "About", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        });

        for (String fileItem : new String[]{"New", "Exit"}) {
            JMenuItem item = new JMenuItem(fileItem);
            item.setActionCommand(fileItem.toLowerCase());
            item.addActionListener(new AbstractAction() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    String command = e.getActionCommand();
                    if ("exit".equals(command)) {
                        System.exit(0);
                    }
                    if ("new".equals(command)) {
                        newGame();
                    }
                }
            });
            if (fileItem.equals("New"))
                item.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_R, InputEvent.CTRL_DOWN_MASK));
            else
                item.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_E, InputEvent.CTRL_DOWN_MASK));
            fileMenu.add(item);
        }
        fileMenu.insertSeparator(1);

        menu.add(fileMenu);
        menu.add(helpMenu);
        helpMenu.add(about);
        gameFrame.setJMenuBar(menu);

        newGame();
    }

    private void shuffleNumbers() {
        int n = 15;
        while (n > 1) {
            int r = random.nextInt(n--);
            int tmp = numbers[r];
            numbers[r] = numbers[n];
            numbers[n] = tmp;
        }
    }

    private void resetNumbers() {
        for (int i = 0; i < numbers.length; i++) {
            numbers[i] = (i + 1) % numbers.length;
        }
        emptyPosition = numbers.length - 1;
    }

    private void newGame() {
        do {
            resetNumbers();
            shuffleNumbers();
        } while (!isSolvableCombination());
        gameOver = false;
        mainPanel.repaint();
    }

    private boolean isSolvableCombination() {
        int counter = 0;
        for (int i = 0; i < numberCount; i++) {
            for (int j = 0; j < i; j++) {
                if (numbers[j] > numbers[i])
                    counter++;
            }
        }
        return counter % 2 == 0;
    }

    private boolean isSolved() {
        if (numbers[numbers.length - 1] != 0)
            return false;
        for (int i = numberCount - 1; i >= 0; i--) {
            if (numbers[i] != i + 1)
                return false;
        }
        return true;
    }
}
